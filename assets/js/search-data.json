{
  
    
        "post0": {
            "title": "Python 2D Iteration",
            "content": "Hacks 2D array (Mini-lab) . Try to build a Christmas Tree. The top shape and a trunk. There are two ways to do this... . Build it by pre-populating a 2D array | Build it completely programmatically | . Use the code below to help guide your adventure . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [[&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers]] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~13 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F . Hacks Monkey Jumpers (Mini-lab) . Feel free to use any ASCII art of your choice, there are some much better monkeys here. My little guys were simply made up out of my head while looking at unicode characters. . Build more monkeys, different monkeys or entire rhyme for the &quot;Monkey Jumpers&quot; countdown poem | Add names or other properties to the monkeys | Use a completely different application of something that is 2D. | Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; def main(): print(&quot;Nursery Rhyme&quot;) # identification message # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color # out of all the loops, prints finishing messages print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . Nursery Rhyme 5 little monkeys jumping on the bed... (◕‿◕✿) _⍾_/ ==4== _/ _ ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 4 little monkeys jumping on the bed... ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 3 little monkeys jumping on the bed... ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 2 little monkeys jumping on the bed... ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 0 little monkeys jumping on the bed... No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods(Mini-lab) . Build your own moving object. Make a few frames the energetic way, then figure out how to do it the programmatic way. . Be creative, by the way, I have always wanted my Monkeys jumping on a bed. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[32m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*35 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | |/ __ |__/ ____/ - .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/1.d/2.b/3.b/c3.1/2022/12/01/PBL-2d-iteration.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2022/12/01/PBL-2d-iteration.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Algorithms and Logic",
            "content": "Algorithm . An algorithm typically means &#39;code&#39; that solves a problem. Designing an algorithm often requires you to learn the Tech first and then consider how you design your code and algorithms. Code design can take many iterations. . Truth Tables . My topic for this blog is Truth Tables. The illustration that follows displays the results of logical operators AND, OR, XOR, NOT versus binary 1 and 0. The output produces a &#39;Truth Table&#39;. . . Exploring Truth Tables operations . Exploration of this topic requires searching the language for logical operators, then figuring out how to display condition and test result. . Bitwise operations for Truth Tables typically represent 1 - True and 0 - False. | Logical expression in iteration and selection statements result in True or False | . My objective is Truth Tables. But in my exploration I did both Truth Table and Expression syntax . print(&quot;OR&quot;) print( &quot;1 | 0 = &quot;, 1 | 0) print( &quot;~(1 | 0) = &quot;, ~(1 | 0) % 2) # 1 is an integer, not a bit so remainder (modulo) does trick print(&quot;AND&quot;) print( &quot;1 &amp; 0 = &quot;, 1 &amp; 0) print( &quot;~(1 &amp; 0) = &quot;, ~(1 &amp; 0) % 2) # modulo again print(&quot;XOR&quot;) print( &quot;1 ^ 1 = &quot;, 1 ^ 1) print() # Boolean Tests print(&quot;Boolean OR&quot;) print( &quot;True or False = &quot;, True or False) print(&quot;Boolean AND&quot;) print( &quot;True and False = &quot;, True and False) print(&quot;Boolean XOR&quot;) print( &quot;True != True = &quot;, True != True) . OR 1 | 0 = 1 ~(1 | 0) = 0 AND 1 &amp; 0 = 0 ~(1 &amp; 0) = 1 XOR 1 ^ 1 = 0 Boolean OR True or False = True Boolean AND True and False = False Boolean XOR True != True = True . Algorithm 1 . This algorithm focuses on small reusable procedures/functions (def) for bitwise tests. From the exploratory experience above it seems like a lot of typing would be necessary to represent possibilities. . import operator # functions for all comparisons, logical operations, mathematical operations and sequence operations # builds truth table def truth_options(): a_opts = [1, 0] b_opts = [1, 0] return [(a, b) for a in a_opts for b in b_opts] # double for permutes options # provides equivalent function lookup for bitwise using operator functions def bitwise_options(op): ops = {&#39;&amp;&#39;: operator.and_, &#39;|&#39;: operator.or_, &#39;^&#39;: operator.xor} return ops[op] # control/eval for bitwise operators, selection is based on number of operators def bitwise_eval(op, op2=&quot;&quot;): if op2 == &quot;&quot;: op_func = bitwise_options(op) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{a} {op} {b} is {op_func(a, b)}&quot;) else: op2_func = bitwise_options(op2) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{op}({a} {op2} {b}) is {(1, 0)[op2_func(a, b)]}&quot;) # opposite: index 0 returns 1, index 1 return 0 def method1(): bitwise_eval(&quot;&amp;&quot;) bitwise_eval(&quot;NAND&quot;, &quot;&amp;&quot;) bitwise_eval(&quot;|&quot;) bitwise_eval(&quot;NOR&quot;, &quot;|&quot;) bitwise_eval(&quot;^&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 1 *****&quot;) method1() . ***** Method 1 ***** Bitwise &amp; 1 &amp; 1 is 1 1 &amp; 0 is 0 0 &amp; 1 is 0 0 &amp; 0 is 0 Bitwise NAND NAND(1 &amp; 1) is 0 NAND(1 &amp; 0) is 1 NAND(0 &amp; 1) is 1 NAND(0 &amp; 0) is 1 Bitwise | 1 | 1 is 1 1 | 0 is 1 0 | 1 is 1 0 | 0 is 0 Bitwise NOR NOR(1 | 1) is 0 NOR(1 | 0) is 0 NOR(0 | 1) is 0 NOR(0 | 0) is 1 Bitwise ^ 1 ^ 1 is 0 1 ^ 0 is 1 0 ^ 1 is 1 0 ^ 0 is 0 . Truth Table - Algorithm 2 . This algorithm above seemed to me to lose clarity with all the functions. The second attempt focuses on truth tables as a linear sequence, with loops for required repetitions. This seemed more understandable to me than my 1st attempt. . def method2(): truth_table = [[1,1], [1,0], [0,1], [0,0]] for a, b in truth_table: print(f&quot;and {a} &amp; {b}: {a &amp; b}&quot;) for a, b in truth_table: print(f&quot;nand ~({a} &amp; {b}): {((a &amp; b) + 1) % 2}&quot;) # warning: ~ negates entire integer without modulo for a, b in truth_table: print(f&quot;or {a} | {b}: {a | b}&quot;) for a, b in truth_table: print(f&quot;nor ~({a} | {b}): {((a | b) + 1) % 2}&quot;) # warning: see above for a, b in truth_table: print(f&quot;xor {a} ^ {b}: {a ^ b}&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 2 *****&quot;) method2() . ***** Method 2 ***** and 1 &amp; 1: 1 and 1 &amp; 0: 0 and 0 &amp; 1: 0 and 0 &amp; 0: 0 nand ~(1 &amp; 1): 0 nand ~(1 &amp; 0): 1 nand ~(0 &amp; 1): 1 nand ~(0 &amp; 0): 1 or 1 | 1: 1 or 1 | 0: 1 or 0 | 1: 1 or 0 | 0: 0 nor ~(1 | 1): 0 nor ~(1 | 0): 0 nor ~(0 | 1): 0 nor ~(0 | 0): 1 xor 1 ^ 1: 0 xor 1 ^ 0: 1 xor 0 ^ 1: 1 xor 0 ^ 0: 0 . Linear Sequence of code . The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above. . Procedure (Function) . A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called &quot;Procedural Abstraction&quot;. . In Python, using procedures (def) means you are starting to write &quot;good&quot; code vs &quot;bad&quot; code, mostly in terms of reusability of logic. | A procedure needs to be activated or called, this is performed in the main selections above. | . Hacks . As we explore the algorithm Unit students will be designing lessons and homework. Each lesson will have Hacks. Here are some hacks that could go with the lesson above. The three weeks after Thanksgiving will be focused on this activity and build personal portfolio. . Try to build a Truth Table as shown above in Python, but switch to JavaScript... . Begin by showing understanding of problem using console.log, this problem can be done in Jupyter Notebook | Build a Truth Table in JavaScript showing output in HTML, this problem is best in FastPages | . Pick your Algorithmic hack, build in Python and JavaScript. Here are some ideas.. . Binary to Hexadecimal to Decimal conversions | Fibonacci | Palindrome | Other | . Come up with a Procedure/Function that show... . Data Abstraction | Procedural Abstraction | Algorithm using iteration and selection | Frontend / Backend, using an API and persistent storage | .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/2022/11/07/AP-logic-and-algos.html",
            "relUrl": "/2022/11/07/AP-logic-and-algos.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Wordnerd",
            "content": "import { WORDS } from “./word2.js”; . const NUMBER_OF_GUESSES = 6; let guessesRemaining = NUMBER_OF_GUESSES; let currentGuess = []; let nextLetter = 0; let rightGuessString = WORDS[Math.floor(Math.random() * WORDS.length)] console.log(rightGuessString) function initBoard() { let board = document.getElementById(“game-board”); . for (let i = 0; i &lt; NUMBER_OF_GUESSES; i++) { let row = document.createElement(&quot;div&quot;) row.className = &quot;letter-row&quot; for (let j = 0; j &lt; 6; j++) { let box = document.createElement(&quot;div&quot;) box.className = &quot;letter-box&quot; row.appendChild(box) } board.appendChild(row) } } . document.addEventListener(“keyup”, (e) =&gt; { . if (guessesRemaining === 0) { return } let pressedKey = String(e.key) if (pressedKey === &quot;Backspace&quot; &amp;&amp; nextLetter !== 0) { deleteLetter() return } if (pressedKey === &quot;Enter&quot;) { checkGuess() return } let found = pressedKey.match(/[a-z]/gi) if (!found || found.length &gt; 1) { return } else { insertLetter(pressedKey) } }) function insertLetter (pressedKey) { if (nextLetter === 6) { return } pressedKey = pressedKey.toLowerCase() let row = document.getElementsByClassName(&quot;letter-row&quot;)[6 - guessesRemaining] let box = row.children[nextLetter] box.textContent = pressedKey box.classList.add(&quot;filled-box&quot;) currentGuess.push(pressedKey) nextLetter += 1 } function deleteLetter () { let row = document.getElementsByClassName(&quot;letter-row&quot;)[6 - guessesRemaining] let box = row.children[nextLetter - 1] box.textContent = &quot;&quot; box.classList.remove(&quot;filled-box&quot;) currentGuess.pop() nextLetter -= 1 } function checkGuess () { let row = document.getElementsByClassName(&quot;letter-row&quot;)[6 - guessesRemaining] let guessString = &#39;&#39; let rightGuess = Array.from(rightGuessString) for (const val of currentGuess) { guessString += val } if (guessString.length != 6) { alert(&quot;Not enough letters!&quot;) return } if (!WORDS.includes(guessString)) { alert(&quot;Word not in list!&quot;) return } for (let i = 0; i &lt; 6; i++) { let letterColor = &#39;&#39; let box = row.children[i] let letter = currentGuess[i] let letterPosition = rightGuess.indexOf(currentGuess[i]) // is letter in the correct guess if (letterPosition === -1) { letterColor = &#39;grey&#39; } else { // now, letter is definitely in word // if letter index and right guess index are the same // letter is in the right position if (currentGuess[i] === rightGuess[i]) { // shade green letterColor = &#39;green&#39; } else { // shade box yellow letterColor = &#39;yellow&#39; } rightGuess[letterPosition] = &quot;#&quot; } let delay = 250 * i setTimeout(()=&gt; { //shade box box.style.backgroundColor = letterColor shadeKeyBoard(letter, letterColor) }, delay) } if (guessString === rightGuessString) { alert(&quot;You guessed right! Game over!&quot;) guessesRemaining = 0 return } else { guessesRemaining -= 1; currentGuess = []; nextLetter = 0; if (guessesRemaining === 0) { alert(&quot;You&#39;ve run out of guesses! Game over!&quot;) alert(`The right word was: &quot;${rightGuessString}&quot;`) } } } .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/2022/11/02/WordNerd.js",
            "relUrl": "/2022/11/02/WordNerd.js",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Javascript Inputs using a Grade Calculator",
            "content": "The code segment below builds the container for the output and input for the grade calculator. . Read more here . &lt;div class=&quot;container bg-primary&quot;&gt; &lt;header class=&quot;pb-3 mb-4 border-bottom border-primary text-dark&quot;&gt; &lt;span class=&quot;fs-4&quot;&gt;Grade Calculator&lt;/span&gt; &lt;/header&gt; &lt;form&gt; &lt;!-- Totals --&gt; &lt;div class=&quot;form-group row&quot;&gt; Total : &lt;span id=&quot;total&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; Count : &lt;span id=&quot;count&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; Average : &lt;span id=&quot;average&quot; class=&quot;label label-primary&quot;&gt;0.0&lt;/span&gt; &lt;/div&gt; &lt;!-- Rows --&gt; &lt;div class=&quot;form-group row&quot;&gt; Input scores, press tab to add new number: &lt;div id=&quot;scores&quot;&gt; &lt;input onblur=&quot;calculator()&quot; type=&quot;text&quot; name=&quot;score&quot; id=&quot;score0&quot;/&gt;&lt;br&gt; &lt;!-- javascript generated inputs --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; . The code below creates the function that creates a new input line. . Additional Resources: . Create Element | Set Attribute | . const scoresContainer = document.getElementById(&quot;scores&quot;); // Creates new input line function newInputLine(index) { // Prepare new input line var input = document.createElement(&quot;input&quot;); // input element var br = document.createElement(&quot;br&quot;); // line break element // Setup input line attributes input.setAttribute(&#39;onblur&#39;, &quot;calculator()&quot;); input.setAttribute(&#39;type&#39;, &quot;text&quot;); input.setAttribute(&#39;name&#39;, &quot;score&quot;); input.setAttribute(&#39;id&#39;, &quot;score&quot; + index); // Add input and line break to page scoresContainer.appendChild(input); scoresContainer.appendChild(br); } . The code below creates the function calculator which stores and calculates the total, count, and average of the user inputs. . Additional Resources: . Get Elements by ID | Get Elements by Name | . // Calculates totals function calculator(){ var array = document.getElementsByName(&#39;score&#39;); // setup array of scores if (array[array.length-1].value.length != 0) { // input cell has a value // algorithm to calculate results var total = 0; // running total for(var i = 0; i &lt; array.length; i++){ // iterate through array if(parseFloat(array[i].value)) // convert to float total += parseFloat(array[i].value); // add to running total } // update totals document.getElementById(&#39;total&#39;).innerHTML = total.toFixed(2); document.getElementById(&#39;count&#39;).innerHTML = array.length; document.getElementById(&#39;average&#39;).innerHTML = (total / array.length).toFixed(2); // make a new input line newInputLine(array.length); } // Set cursor focus on last element; this could be new or unchanged element document.getElementById(&quot;score&quot; + (array.length-1)).focus(); } . Hacks . Getting a user input can be useful in other ways: . Looking for a single element in an API, ie Stock in Stock API or BTC in digital coin API, or City in Weather API | Record name, then you could use name input to retrieve something about them from multiple RapidAPI. | Save name and input, like grades, and send data to backend to be recorded, saved, and then retrieved when they enter name on next usage | .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/techtalk/javascriptinput",
            "relUrl": "/techtalk/javascriptinput",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Javascript Web Page using an API",
            "content": "The code below holds the info that is being generated into an HTML table. . Key things to know: . &lt; table &gt; creates a TABLE | &lt; tr &gt; creates a ROW | &lt; th &gt; makes the text a column HEADER | &lt; tbody id = &quot;results&quot; &gt; defines an element id, to be used within JavaScript | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Joke&lt;/th&gt; &lt;th&gt;HaHa&lt;/th&gt; &lt;th&gt;Boohoo&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- javascript generated data --&gt; &lt;/tbody&gt; &lt;/table&gt; . Constant variables are declared here with keyword const . Key things to know: . The document object &quot;result&quot; represents table body in the HTML above. | If you want to access any element in an HTML page in JavaScript, you always start by accessing the document object. In this case, we are accessing &quot;result&quot; and defining a &quot;resultContainer&quot; | In the code, in following cells, document elements are created and organized for each Joke, each is added to the &quot;resultContainer&quot; as a row in the table body. | Accessing the api is done using the variables url and options, this is setup to fetch the Jokes from the backend | . // prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const HAHA = &quot;haha&quot;; const BOOHOO = &quot;boohoo&quot;; // prepare fetch urls const url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; // haha reaction const jeer_url = url + &quot;/jeer/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method . The below code uses a function called fetch to gather the data from the backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked in case the site is down and returns an error | On successful fetch, the code places each Joke in the HTML table body using a &quot;for&quot; loop and creating document elements from each &quot;row&quot; of the fetched &quot;data&quot;. | The creation of each Haha and Boohoo &quot;onclick&quot; &quot;button&quot; is also done in the same loop. | Updates to backend are setup to occur with each onclick, each click calls the &quot;reaction&quot; function | . // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); for (const row of data) { // make &quot;tr element&quot; for each &quot;row of data&quot; const tr = document.createElement(&quot;tr&quot;); // td for joke cell const joke = document.createElement(&quot;td&quot;); joke.innerHTML = row.id + &quot;. &quot; + row.joke; // add fetched data to innerHTML // td for haha cell with onclick actions const haha = document.createElement(&quot;td&quot;); const haha_but = document.createElement(&#39;button&#39;); haha_but.id = HAHA+row.id // establishes a HAHA JS id for cell haha_but.innerHTML = row.haha; // add fetched &quot;haha count&quot; to innerHTML haha_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(HAHA, like_url+row.id, haha_but.id); }; haha.appendChild(haha_but); // add &quot;haha button&quot; to haha cell // td for boohoo cell with onclick actions const boohoo = document.createElement(&quot;td&quot;); const boohoo_but = document.createElement(&#39;button&#39;); boohoo_but.id = BOOHOO+row.id // establishes a BOOHOO JS id for cell boohoo_but.innerHTML = row.boohoo; // add fetched &quot;boohoo count&quot; to innerHTML boohoo_but.onclick = function () { // onclick function call with &quot;jeer parameters&quot; reaction(BOOHOO, jeer_url+row.id, boohoo_but.id); }; boohoo.appendChild(boohoo_but); // add &quot;boohoo button&quot; to boohoo cell // this builds ALL td&#39;s (cells) into tr (row) element tr.appendChild(joke); tr.appendChild(haha); tr.appendChild(boohoo); // this adds all the tr (row) work above to the HTML &quot;result&quot; container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + url); }); . The below code uses fetch to update backend data using &quot;put_options&quot;. The purpose is to update Hahaa and Bohoo counters in backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked to verify update occurred | The element id of button clicked is updated with the data returned from the API. | Note, the elemID is received as parameter. This data was setup when the button was created in former cell. | . // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === HAHA) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === BOOHOO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } // Something went wrong with actions or responses function error(err) { // log as Error in console console.error(err); // append error to resultContainer const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } . Hacks . The code below relates to the rapidapi you worked with last week. . What are some similarities you see with the javascript for the jokes api? | In a blogpost, break up the code in cells like done above and try to describe what this code is doing. | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/techtalk/webfrontend",
            "relUrl": "/techtalk/webfrontend",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . . JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | Vidhi | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 bash: python2: command not found . . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Bash Tutorial",
            "content": "Prerequisites for Bash on Jupyter . Being able to find a Bash Reference. Here is a Bash Cheat Sheet Install the Bash Kernel for Jupyter notebooks. Expectations are pip3 and python3 are defined within the path. The bash shell allowed construction of this tutorial. . pip install bash_kernel | python -m bash_kernel.install | . Selecting a kernel in &quot;code --project--&quot; or &quot;jupyter notebook --file.ipynb--&quot; that have bash in options. . Prerequisites for Project Directory . Practice pulling code from git to your machine. This will create a project directory and add APCSP github project to the directory. There is conditional logic to make sure that directory and pull only happen if it does not (!) exist. . Hack:Change variables, make new directory, clone to that directory. | . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Look inside Fastpages/Github page project . All computers contain files and directories. The clone brought more files from cloud to your machine. Using the bash shell you will see some commands that show and interact with files and directories. . &quot;ls&quot; lists computer files in Unix and Unix-like operating systems | &quot;cd&quot; offers way to navigate and change working directory | &quot;pwd&quot; print working directory | &quot;echo&quot; used to display line of text/string that are passed as an argument | . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look inside a Markdown File . &quot;cat&quot; reads data from the file and gives its content as output . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Env, Git and GitHub . Env(ironment) is used to capture things like path to Code or Home directory. Git and GitHub is NOT Only used to exchange code between individuals, it is often used to exchange code through servers, in our case deployment for Website. All tools we use have a behind the scenes hav relationship with the system they run on (MacOS, Windows, Linus) or a relationship with servers which they are connected to (ie GitHub). There is an &quot;env&quot; command in bash. There are environment files and setting files (.git/config) for Git. They both use a key/value concept. . &quot;env&quot; show setting for your shell | &quot;git clone&quot; sets up a director of files | &quot;cd $project&quot; allows user to move inside that directory of files | &quot;.git&quot; is a hidden directory that is used by git to establish relationship between machine and the git server on GitHub. | . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . Student Request - Make a file in Bash . This example was requested by a student (Jun Lim, CSA). The request was to make jupyer file using bash, I adapted the request to markdown. This type of thought will have great extrapolation to coding and possibilities of using List, Arrays, or APIs to build user interfaces. JavaScript is a language where building HTML is very common. . To get more interesting output from terminal, this will require using something like mdless (https://github.com/ttscoff/mdless). This enables see markdown in rendered format.- On Desktop Install PKG from MacPorts . In Terminal on MacOS Install ncurses | gem install mdless | . | . Output of the example is much nicer in &quot;jupyter&quot; . cd /tmp file=&quot;sample.md&quot; if [ -f &quot;$file&quot; ]; then rm $file fi tee -a $file &gt;/dev/null &lt;&lt;EOF # Show Generated Markdown This introductory paragraph and this line and the title above are generated using tee with the standard input (&lt;&lt;) redirection operator. - This bulleted element is still part of the tee body. EOF echo &quot;- This bulleted element and lines below are generated using echo with standard output (&gt;&gt;) redirection operator.&quot; &gt;&gt; $file echo &quot;- The list definition, as is, is using space to seperate lines. Thus the use of commas and hyphens in output.&quot; &gt;&gt; $file actions=(&quot;ls,list-directory&quot; &quot;cd,change-directory&quot; &quot;pwd,present-working-directory&quot; &quot;if-then-fi,test-condition&quot; &quot;env,bash-environment-variables&quot; &quot;cat,view-file-contents&quot; &quot;tee,write-to-output&quot; &quot;echo,display-content-of-string&quot; &quot;echo_text_&gt; $file,write-content-to-file&quot; &quot;echo_text_&gt;&gt; $file,append-content-to-file&quot;) for action in ${actions[@]}; do # for loop is very similar to other language, though [@], semi-colon, do are new action=${action//-/ } # convert dash to space action=${action//,/: } # convert comma to colon action=${action//_text_/ &quot;sample text &quot; } # convert _text_ to sample text, note escape character to avoid &quot;&quot; having meaning echo &quot; - ${action//-/ }&quot; &gt;&gt; $file # echo is redirected to file with &gt;&gt; done echo &quot;&quot; echo &quot;File listing and status&quot; ls -l $file # list file wc $file # show words mdless $file # this requires installation, but renders markown from terminal rm $file # clean up termporary file . Hacks . Go back to some of the deployment procedures and think about some thing you could verify through Bash notebook. . Is there anything we use to verify tools we install? Think about versions. | Is there anything we could verify with Anaconda? | How would you update a repository? | Really cool would be automating a procedure from installation. | .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/techtalk/bash",
            "relUrl": "/techtalk/bash",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Anthony and Sahil's Reflections",
            "content": "Anthony: Computer Science Before APCSA . Hello! My name is Anthony Vo, and I graduated Del Norte with the class of 2022. . My computer science journey started when I was in second grade. Khan Academy used to have a coding portion of its website, and I remember spending hours making programs that drew simple images. There was no logic involved in the coding, but as an introduction, it got me hooked on the subject. Here&#39;s a recreation of a pig that I made using Khan Academy: . . In elementary school, I used Scratch to create a plethora of games. During the summer, I also took ID Tech Camps that taught me more about game design and programming. Though some of these camps weren&#39;t that helpful in learning computer science (Minecraft mapping isn&#39;t a skill I use to day), they furthered my interest in the subject. You can check out some of my scratch projects here. . I took more computer science classes in middle school with the two GTT classes. The classes still worked a lot with Scratch, but in 8th grade, I learned more about HTML, CSS, JavaScript, and Python. Those classes didn&#39;t result in the best programs, but it provided a solid foundation for problem solving and syntax that I continue to build off of today. Below are a few programs that I made in eighth grade (updated to conform to modern Python standards). . &quot;&quot;&quot;Anthony Vo 11-14-17 coinflip.py To practice using random numbers&quot;&quot;&quot; #Imports random module import random #Initializes variables numberOfHeads = 0 numberOfTails = 0 #Flips coins for number in range(20): coinSide = random.randrange(2) if coinSide == 0: numberOfHeads = numberOfHeads + 1 print(&quot;Heads&quot;) else: numberOfTails = numberOfTails + 1 print(&quot;Tails&quot;) #Gives result print(f&quot;Overall, heads was flipped {numberOfHeads} times while tails was flipped {numberOfTails} times.&quot;) . Tails Tails Tails Tails Tails Heads Heads Tails Tails Tails Tails Tails Tails Tails Tails Heads Heads Tails Heads Tails Overall, heads was flipped 5 times while tails was flipped 15 times. . &quot;&quot;&quot;Anthony Vo 11-14-17 fortunecookies.py To practice using random numbers&quot;&quot;&quot; #Imports random module import random #Gives messages whichMessage = random.randrange(5) if whichMessage == 0: print(&quot;You will soon have indigestion due to that fortune cookie.&quot;) elif whichMessage == 1: print(&quot;You will buy more Kung Pao Chicken in the future.&quot;) elif whichMessage == 2: print(&quot;Following this retaurant&#39;s Facebook page will make you prosperous.&quot;) elif whichMessage == 3: print(&quot;If you go to that fake Chinese restaurant Panda Express, you will become poor.&quot;) else: print(&quot;Not eating Chinese cuisine will cause you to have many unlucky days.&quot;) . Following this retaurant&#39;s Facebook page will make you prosperous. . The next computer science class that I took was Mr. Mortensen&#39;s Intro to Computer Science class (which has since been replaced with CSP). This was probably my favorite class in all of high school; hanging out in fifth period with my friends, coding, and having an overall good time was one of the highlights of high school... which probably says something about me ;). I learned how to use GitHub in this class and really collaborate with my peers, which helped me apply my skills to a practical environment. I also learned C which helped me understand more about how computers processed code. Below is a program I made which creates random questions. You can see how much better my programming got after taking this class! . // // main.c // parameterFunctionQuestion(s) // // Created by Vo, Anthony on 9/11/19. // Copyright © 2019 Vo, Anthony. All rights reserved. // #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt; int questionMaker (double arg1, char operator, double arg2) { //function that creates math questions based off of given paramters int input, randomizer, answer, i, j, seqChecker[4]; double answerSeq[4]; int score = 0, shutOff = 0; srand(time(0)); //initializes score, input, and random seed switch (operator) { case &#39;+&#39;: answer = arg1 + arg2; break; case &#39;-&#39;: answer = arg1 - arg2; break; case &#39;/&#39;: answer = arg1 / arg2; break; case &#39;*&#39;: answer = arg1 * arg2; break; } //determines correct answer double answer1 = arg1 + arg2; double answer2 = arg1 - arg2; double answer3 = arg1 / arg2; double answer4 = arg1 * arg2; //gives possible answers if (answer1 == answer4) { if (operator == &#39;+&#39;) { answer4 = answer1 - (rand() % 100) + 1; } else { answer1 = answer4 - (rand() % 100) + 1; } } if (answer3 == answer4) { if (operator == &#39;*&#39;) { answer3 = answer4 - (rand() % 100) + 1; } else { answer4 = answer3 - (rand() % 100) + 1; } } if (answer2 == answer3) { if (operator == &#39;-&#39;) { answer3 = answer2 - (rand() % 100) + 1; } else { answer2 = answer3 - (rand() % 100) + 1; } } //failsafe for if two answers are the same (i.e. 4 - 2 = 4 / 2) for (i = 0; i &lt; 4; i++) { seqChecker[i] = 0; } //cleans up seqChecker (has some random integers inside of it, not sure why) for (i = 0; i &lt; 4; i++) { while (shutOff == 0) { randomizer = rand() % 4; if (seqChecker[0] != randomizer + 1 &amp;&amp; seqChecker[1] != randomizer + 1 &amp;&amp; seqChecker[2] != randomizer + 1 &amp;&amp; seqChecker[3] != randomizer + 1) { shutOff = 1; } } shutOff = 0; randomizer ++; switch(randomizer) { case 1: answerSeq[i] = answer1; seqChecker[i] = 1; break; case 2: answerSeq[i] = answer2; seqChecker[i] = 2; break; case 3: answerSeq[i] = answer3; seqChecker[i] = 3; break; case 4: answerSeq[i] = answer4; seqChecker[i] = 4; break; } } //randomizes answers printf(&quot;%lf %c %lf is? n&quot;, arg1, operator, arg2); printf(&quot;1) %lf n2) %lf n3) %lf n4) %lf n&quot;, answerSeq[0], answerSeq[1], answerSeq[2], answerSeq[3]); scanf(&quot;%d&quot;, &amp;input); //asks question if (answerSeq[input - 1] == answer) { score++; printf(&quot;Correct! n&quot;); } else { printf(&quot;Incorrect n&quot;); } //checks for correct answer return score; //returns points gained } int main(void) { srand(time(0)); int score = 0, questions = 0; /* int i, operator; for (i = 0; i &lt; (rand() % 5) + 1; i++) { operator = rand() % 4; switch(operator) { case 0: score += questionMaker(rand() % 20 + 1, &#39;+&#39;, rand() % 20 + 1); break; case 1: score += questionMaker(rand() % 20 + 1, &#39;-&#39;, rand() % 20 + 1); break; case 2: score += questionMaker(rand() % 20 + 1, &#39;/&#39;, rand() % 20 + 1); break; case 3: score += questionMaker(rand() % 20 + 1, &#39;*&#39;, rand() % 20 + 1); break; } questions++; } */ //asks random questions (i.e. random arguments and operators) questionMaker(10, &#39;*&#39;, 8); questions++; printf(&quot;Your final score is %d out of %d n&quot;, score, questions); return 0; } . Anthony: My AP CSA Experience . Finally, we&#39;ve reached junior year. I took AP CSA during the quarantine year, and it helped me improve my Object Oriented Programming skills by a lot. My success in the class stemmed mostly from motivation to code; I spent my first periods coding instead of playing Roblox (which was a popular alternative that I did in my English classes), and I made sure to finish all of my assignments on time without copying from others. Mr. Mortensen&#39;s AP study plan also helped a lot. We were required to finish a CollegeBoard unit quiz every week, so I would hop in a Discord call with my group members every Friday to do the quiz together. I have a lot of fond memories of staying up until 2 AM with my friends on Friday to meet Mr. Mortensen&#39;s assignment deadline (admittedly, it was a lot more fun than it sounds). . For success in AP CSA, I would recommend completing everything on time. Though there is a grace period for a lot of assignments, if you fall behind one week and don&#39;t understand a concept, it can quickly snowball out of control. Get on top of your assignments, make sure you understand each week&#39;s concepts, and you&#39;ll succeed. You don&#39;t need to have had years of prior experience like me; you just need to try your best to understand and work on each week&#39;s work. . After junior year, I realized that I had a big hole in my repretoire. I could code well, sure, but I couldn&#39;t actually present or make anything of substance. So, as I chose senior classes, I decided on CSP to work on my web development skills. I spent the summer writing college essays, playing League of Legends, and hanging out. I also found out that I got a 5 on the AP CSA exam! When fall came, I was ready to begin creating polished websites. During that first trimester, I met a new friend... . Sahil: Starting Out . Hey, I&#39;m Sahil Samar. I&#39;m currently a senior at Del Norte, in the graduating class of 2023. . My computer science journey started out in around 8th grade when I got interested in game development. But game development was a super hard thing to start with! Unity uses a language called C#, and I didn&#39;t have any idea how to use it. I didn&#39;t really understand the architecture of Unity or C# at first; I just kind of dove in and started making projects. I would look up what I didn&#39;t know, and just copy paste in code to get things working. Even this was hard, because when something went wrong I had no idea how to fix it. But with way too many hours, I was able to make some projects. It isn&#39;t easy to get started getting into coding! By the time I got to AP CSP, I still had a lot to learn about the coding mindset. . My very first game, 3D Pong: . . Sahil: AP CSP . When I got to AP CSP, I still didn&#39;t really have an idea of how coding worked. I just knew how to find code and paste it into my project. But slowly, I began moving away from this. I met Anthony Vo, who you just read a little bit about, in my first trimester. Whenever I didn&#39;t understand something, he would always help me out. He wouldn&#39;t give me code to copy paste though. He would actually explain the code to me, so I could do it myself. This was huge for me, since I actually began to think about my code and be able to develop things on my own. Mr. Mortensen guided me through countless problems, but everytime I asked him for help I walked away with some new understanding of how to debug my code. At the start of the trimester, I would go up to Mr. Mortensen or Anthony as soon as I had a problem. But by the end of the year, I only used them as a last resort, after I had truly tried everything. At that point, I just needed a pair of fresh eyes, and not someone to guide me through the whole process. Moral of the story: you aren&#39;t expected to come in an expert at coding! But, if you use your resources properly, you can use this year to grow. You can develop the mindset of a programmer and learn how to create cool projects and debug your issues when things don&#39;t work out. . Sahil: After AP CSP . AP CSP shaped me to be the coder I am today; but you only get out of it what you put into it. If you work hard, then it can completely change your mindset (if you are a new coder), and teach you plenty of skills. After AP CSP, I was able to land a summer internship working in CS at the San Diego Supercomputer Center. During this internship, I worked with huge supercomputers and began to understand what servers really were and how they worked. Our project was called ICICLE. If you want to learn more about it, you could watch this short video: https://www.youtube.com/watch?v=gNFk5tDTtoU. I developed sophisticated authentication methods, and did a lot of &quot;firsts&quot; in the project. I went from having to be guided through basic code in CSP to creating things that had never been done before. It&#39;s possible! After doing a lot of stuff behind the scenes, we got to test our system on massive knowledge graphs and run some machine learning algorithms. . Picture of one of the computers I worked with, called Expanse: . . Knowledge Graph of Asteroids, classified using a neural network on being hazarous or not: . . I also never gave up on making games! But now, I don&#39;t really need to follow tutorials anymore. I can architect a solution on my own, and when I do need to look something up I learn from it and implement it rather than just copying it. When something goes wrong, I&#39;m not stuck; I know what to do, and I have confidence because I know that every problem has a solution. Here&#39;s a peek at one of the games I&#39;m working on now: . . Anthony: After CSP . AP CSP helped immensely with my presentation and web development skills. For reference, here&#39;s a website I made for my 10th grade AP European History Final... . . As you can see, it looks like garbage! You can also check out my extremely great 11th grade website for AP CSA here. . After taking AP CSP, my websites looked a lot better. I updated a website for my golf coach and made some personal websites. Here&#39;s a quick one that I made to create basketball teams: . . Even if you&#39;re new to CS as a whole, knowing how to make websites can help you show off the things you&#39;ve done. Whether it&#39;s a personal portfolio website, an online shop, or anything else, web development is a great skill to have. . Final Thoughts . Anthony: I hope you have a great year in this class! If you put in the time and effort, you will be really successful and gain skills that you can use for the rest of your life. Best of luck to you all! . Sahil: .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/collegeboard/anthony-and-sahil",
            "relUrl": "/collegeboard/anthony-and-sahil",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Hello to Python",
            "content": "Hello, World! . These examples show the basic language structures and constructs of Python using print and input commands (aka anatomy). . Print command using Static Text which performs output . The classic introduction to a programming language is to output a &quot;Hello, World!&quot; message. In Python, this is a print statement. . The command or function is print() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the print command. | The print command outputs the parameter to the terminal, as you see it in this Jupyter document | Output in Jupyter Notebook is below the code cell. Output will vary depending on tools and development intentions. Python print typically outputs to a terminal, we will see that when students start using Visual Studio Code. | . print(&quot;Hello World!&quot;) . Dynamic example showing variables, input and output . This second example is a sequence of code, two or more lines forms a sequence. This example takes input from the user and stores the input into a variable called msg (short for message), then outputs the msg to terminal. - This example is Dynamic as the input and output can change each time the code is run. . A variable &quot;msg&quot; is part of both statement The variable &quot;msg&quot; is used to capture the input command | The variable &quot;msg&quot; is then used as a parameter to print command, causing input to be output to terminal, or in Jupyter Notebook below the code cell. | . | The &quot;input&quot; command activates the jupyter notebook input box, which obtains input from the user (try it!) the &quot;msg&quot; variable is the dynamic result of the input command | . | The print command outputs the &quot;msg&quot; variable captured in the input statement note, msg is a parameter to the print function | . | Input and Output in Jupyter Notebook Input is NOT in line with Output, this is a little annoyance and requires familiarity. Input and Output will vary depending on tools and development intentions. Python print typically obtains input and outputs to a terminal, students will see that when they run Python programs using Visual Studio Code. | . msg = input(&quot;Enter a greeting: &quot;) print(msg) . Building a Function . This example adds to the basics of the Python anatomy, a function. Input, output, and grouping commands in functions is the key to most programming languages. This example simulates a free response answer to a question. . The &quot;def question_and_answer(prompt)&quot; now contains multiple indented commands, the commands print and input were learned previously. | Grouping a sequence of commands, often used repeatedly, is called procedural abstraction. | Procedure, Function, def are all synonyms in the Python language. | The &quot;def&quot; is a key word in Python that defines a function. Using this keyword defines a group of commands, but does not run them initially. | The name of the function in this example is &quot;question_and_answer&quot;. In essence, we are defining our own command within the Python language. | The three &quot;question_and_answer&quot; commands that follow the function and indented commands allow this function to be run. | This code of the function is then run multiple times, each command line providing a unique &quot;prompt&quot; as a result of the literal parameter passed to the function. | The function takes a parameter called &quot;prompt&quot;, which is a message output to the user to describe the input requested. | String concatenation &quot;+&quot; prefixes the prompt with the literal message &quot;Question: &quot;. | The &quot;msg&quot; variable is captured as a result of the jupyter notebook input supplied by the user | The input &quot;msg&quot; is output back to the user with &quot;Answer: &quot; concatenated to the front. | . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Imports, Selection, and Logical Expressions . In Python anatomy of you will be importing libraries and functions. This is code that is developed by others. In this example we are importing from a library called &quot;os&quot;, this library extracts properties from the operating system of your existing system. Additionally, this example uses the custom function defined earlier in the Jupyter document. Python and Jupyter docs requires you to reference imports and definitions above the referencing line of code. . import os, sys obtain functions and variables from running environment | print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable + &quot; on &quot; + sys.platform + &quot;!&quot;), is a concatenated statement that outputs properties from the import | . Next, this example defines a new function &quot;question_with_response&quot;, this function returns a value input by the user. This allows programmer to evaluate the response. The purpose of obtaining the return value is to evaluate if correct response was given to the question. . response from &quot;question_with_response&quot; is captured in a variable called &quot;rsp&quot; return command in function returns msg input by user | assignment to &quot;rsp&quot; is allowed a function is returning a value, names do not need to match (but could) | . | if command is next command in sequence after &quot;rsp&quot; assignment this command contains an expression, rsp == &quot;import&quot; which compare what is typed to the string literal answer | an if expression is evaluated for true or false | true takes branch of code directly under if | false takes branch of code directly under else command | . | . The grand finally of this example is calculating the right/total. . question = 3 is defined as number of questions | correct = 0 is defined as running score | correct += 1 is the way to add one to the score, this code is placed in sequence under correct expression evaluation | since question and correct are numbers, versus strings, to place them in concatenation in print statements you must inclose them in Python function str() which turns number into string. | final print statement is concatenated and formatted to give user and right over wrong | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hacks . Test running a Python file directly . From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal | . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Build your own quiz, including my questions and show outputs | Create both Markdown for description and Code for execution | Structure your Python code with comments &quot;#&quot; to complement Markdown descriptions | . Additional requirements . Build your quiz so that it captures the key Vocabulary from this Jupyter document | Calculate the percentage of your quiz | Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary | . Extra credit, Advanced . Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration) | .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/collegeboard/python",
            "relUrl": "/collegeboard/python",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Neo4J Graph Database Introduction",
            "content": "Introduction . CS-Students is a sample knowledge graph that can be used to model any classroom that is relation based (a classroom that has lots of different people, pairs, groups, periods; things like that). This notebook is meant to demonstrate how to query this knowledge graph based on the preset things that are currently in the sample data. . Data . Currently, the data consists of the following categories (which are labels in Neo4J): . Period (most teachers would find it useful to have their data divided into class periods) . Scrum Team (basically, the largest overarching groups of students, under period) . Pairs (pairs of students within scrum teams) . Person (object that represents each student) . The data also has the following relationships . IN_PERIOD (to relate teams to the period they are in) . CROSSOVER (a relationship that exists to connect pairs of teams which work together) . PAIR_SHARE (relationship defining students who are paired together) . IN_GROUP (to relate people to the group they are in) . Setup in Anaconda . 1: Install Anaconda . 2: On windows, open the Anaconda command prompt. On mac, open the normal terminal. . 3: Run the following commands: . conda install jupyter . conda install py2neo . conda install pandas . conda install neo4jupyter . 4: If you haven&#39;t already, then clone this repository to a location that you can navigate to easily in your files. . 5: The commands above have configured your conda environment. Now, simply run the command . jupyter notebook . 6: This should open up something in the browser. You will see all of your files. Navigate to the directory which has the github repository clone. . 7: Then, navigate to this notebook. You should be able to run this notebook and experience all of its features now! . Setup in an IDE like VSCode . 1: In the IDE terminal, run the following commands: . pip install jupyter . pip install py2neo . pip install pandas . pip install neo4jupyter . 2: You&#39;re all set to run the notebook! . import pandas as pd import getpass from py2neo import Graph, Node, Relationship from py2neo import GraphService import neo4jupyter neo4jupyter.init_notebook_mode() . # The password is made private. password = getpass.getpass(prompt=&#39;Password: &#39;, stream=None) graph = Graph(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) # database gs = GraphService(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) . neo4jupyter.draw(graph, {&quot;PERSON&quot;: &quot;name&quot;}) . query = &quot;MATCH(n:SCRUM_TEAM) RETURN n.name AS TeamName, n.runtimelink AS RuntimeLink&quot; graph.run(query).to_data_frame() . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 1 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 2 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . The following cells show how to do CRUD operations . You can do more than just query! To see your changes in effect, rerun the visualization in the third cell. . def CreatePerson(personName): tx = graph.begin() createdPerson = Node(&quot;PERSON&quot;, name = personName) tx.create(createdPerson) graph.commit(tx) def CreatePersonTester(): n = input(&quot;Enter a person name: &quot;) CreatePerson(n) # Run the CreatePersonTester function to try creating a node. You should be able to find your new node! CreatePersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. # In a real application, you need to have a way to query by unique ID def UpdateAPerson(personName, newName): graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; SET n.name= &quot;&quot; + str(newName) + &quot; &quot;&quot;) def UpdateAPersonTester(): o = str(input(&quot;Enter the name you want to change: &quot;)) n = str(input(&quot;Enter the new name: &quot;)) UpdateAPerson(o, n) # Try updating the node that you created in the last code block! UpdateAPersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. def DeleteAPerson(personName): node = graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; RETURN n&quot;) try: graph.delete(node) except: return def DeleteAPersonTester(): x = str(input(&quot;Enter a person name: &quot;)) DeleteAPerson(x) # You can try deleting the node that you created by simply entering the person name DeleteAPersonTester() .",
            "url": "https://nighthawkcoders.github.io/Word_Nerd/2022/07/21/PBL-neo4j_intro.html",
            "relUrl": "/2022/07/21/PBL-neo4j_intro.html",
            "date": " • Jul 21, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Play the Game",
          "content": "| Word Nerd | .",
          "url": "https://nighthawkcoders.github.io/Word_Nerd/wordnerd",
          "relUrl": "/wordnerd",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "",
          "content": "Objectives . . This Conceptual Framework teaches College Boards 5 Big Ideas of AP Computer Science Principles, Python, JavaScript, and Web Site application development together in an integrated fashion. The purpose is to teach College Board requirements while adding languages, tools, frameworks, and methodologies that meet Career Technical Education (CTE) needs. The outcome is preparing the High School student for the AP Test and simultaneously building the skills required for Computer Science internships. . . Blogs .",
          "url": "https://nighthawkcoders.github.io/Word_Nerd/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page7": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/Word_Nerd/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}